#!/usr/bin/env ruby

require 'thor'
require 'json'
require File.expand_path('lib/workspace', __dir__)

module Workspace
  class CLI < Thor
    include Thor::Actions
    include Workspace::Docker

    # If the command fails, it will also exit with a code other than zero (0).
    def self.exit_on_failure?
      true
    end

    # Gives the Thor commands a root directory to operate from.
    def self.source_root
      File.dirname(__FILE__)
    end

    desc 'network NAME', 'Create, destroy or clean docker networks'
    option :create, type: :boolean
    option :destroy, type: :boolean
    option :clean, type: :boolean
    def network
      name = Workspace.configuration.network

      if options[:create]
        docker("network create #{name}")
        copy_file('environments/.network.sample.env', 'environments/.network.env') unless File.exists?('environments/.network.env')
        gsub_file('environments/.network.env', /^(NETWORK_NAME=)(.*)$/i, "\\1#{name}", verbose: true)
      elsif options[:destroy]
        docker("network rm #{name}")
      elsif options[:clean]
        docker("network prune --force")
      end
    end

    desc 'service', 'Manage service containers'
    subcommand "service", Workspace::Commands::Service
  end
end

Workspace::CLI.start
